var _0x9495 = ['\x5a\x66\x74', '\x70\x6f\x77', '\x74\x63\x56', '\x45\x41\x6b', '\x51\x48\x62', '\x63\x68\x61\x72\x43\x6f\x64\x65\x41\x74', '\x31\x31\x7c\x31\x32\x7c\x31\x33\x7c\x30\x7c\x31\x34\x7c\x33\x7c\x32\x7c\x39\x7c\x31\x36\x7c\x31\x7c\x34\x7c\x38\x7c\x35\x7c\x36\x7c\x31\x35\x7c\x31\x30\x7c\x37', '\x73\x70\x6c\x69\x74', '\x78\x58\x4d', '\x6c\x65\x6e\x67\x74\x68', '\x6a\x4c\x61', '\x73\x75\x62\x73\x74\x72\x69\x6e\x67', '\x61\x5a\x50', '\x64\x4f\x44', '\x50\x6f\x79', '\x77\x72\x69\x74\x65', '\x70\x75\x73\x68', '\x64\x6b\x46', '\x74\x65\x78\x74', '\x74\x6a\x66', '\x48\x49\x5a', '\x57\x79\x58', '\x66\x61\x7a', '\x47\x63\x79', '\x75\x63\x73', '\x32\x7c\x30\x7c\x35\x7c\x34\x7c\x33\x7c\x31', '\x64\x68\x68', '\x70\x51\x75', '\x65\x4d\x7a', '\x5a\x42\x44', '\x4c\x6e\x6b', '\x66\x72\x6f\x6d\x43\x68\x61\x72\x43\x6f\x64\x65', '\x44\x59\x6c', '\x34\x7c\x33\x7c\x30\x7c\x35\x7c\x36\x7c\x32\x7c\x31', '\x57\x4f\x61', '\x67\x7a\x77', '\x63\x42\x56'];
(function(_0x1f55fe, _0x45ae62) {
    var _0x3d4039 = function(_0x32de24) {
        while (--_0x32de24) {
            _0x1f55fe['\x70\x75\x73\x68'](_0x1f55fe['\x73\x68\x69\x66\x74']());
        }
    };
    _0x3d4039(++_0x45ae62);
}(_0x9495, 0xbf));
var _0x5949 = function(_0x1f55fe, _0x45ae62) {
    _0x1f55fe = _0x1f55fe - 0x0;
    var _0x3d4039 = _0x9495[_0x1f55fe];
    return _0x3d4039;
};


var DOTALL = 0x20;
var CASE_INSENSITIVE = 0x2;
var OpenloadDecoder = {
    'decode': function (O) {
      //Log['\x64']('jj');
      var c2 = [];
      var scriptPattern = /<script[^>]*>([\s\S]*?)<\/script>/gi;
      var scriptMatches = getMatches(O, scriptPattern, 1);
      for (var i = scriptMatches.length - 1; i >= 0; i--) {
        var script = scriptMatches[i];
        var aaEncodedPattern = /(\uFF9F\u03C9\uFF9F\uFF89[\s\S]*?\('_'\);)/g;
        var aaEncodedArr = getMatches(script, aaEncodedPattern, 1);
        for (var j = 0; j < aaEncodedArr.length; j++) {
          var a0909 = aadecode(aaEncodedArr[j]);
          var a0909Pattern = /cc_cc_cc=''\+'(.+)\';$/g;
          var a0909Array = getMatches(a0909,a0909Pattern,1);
          for(var k = 0 ; k < a0909Array.length ;  k++)
          {
            var bbbbRegex = (/<p id="xxxx" style="">(.+)<\/p>/g).replace("xxxx",a0909Array[k]);
            var bbbbArray = getMatches(O,bbbbRegex,1);
            for(var l = 0; l < bbbbArray.length; l++)
            {
              
              var result = decode(bbbbArray[l]);
              Log['\x64'](result);
              c2.push("https://openload.co/stream/" + result + "?mime=true");
              
            }
          }
        }
      }
      return JSON.stringify(c2);
    },
    'isEnabled': function () {
        return !![];
    }
};

function decode(xxxcode) {
    var _0x45ae41 = {
        '\x78\x58\x4d': function _0x184df4(_0x3f842b, _0x6062d8) {
            return _0x3f842b < _0x6062d8;
        },
        '\x6a\x4c\x61': function _0x3457b8(_0x38f439, _0x457b87) {
            return _0x38f439 * _0x457b87;
        },
        '\x61\x5a\x50': function _0x961da7(_0x56acea, _0x37f246) {
            return _0x56acea + _0x37f246;
        },
        '\x64\x4f\x44': function _0x2dfccb(_0x44ea34, _0xe1a069, _0x49022f) {
            return _0x44ea34(_0xe1a069, _0x49022f);
        },
        '\x50\x6f\x79': function _0x170b95(_0x49e0ac, _0x204c53) {
            return _0x49e0ac in _0x204c53;
        },
        '\x64\x6b\x46': function _0x275cbe(_0x48d105, _0x930083) {
            return _0x48d105(_0x930083);
        },
        '\x74\x6a\x66': function _0x2af2f3(_0x5d6e96, _0x41b58f) {
            return _0x5d6e96 * _0x41b58f;
        },
        '\x48\x49\x5a': function _0x1ccc24(_0x2f473c, _0xef0da5) {
            return _0x2f473c ^ _0xef0da5;
        },
        '\x57\x79\x58': function _0x83e7c(_0x4fa9eb, _0x4fc60d) {
            return _0x4fa9eb ^ _0x4fc60d;
        },
        '\x66\x61\x7a': function _0x7ec967(_0x1d25ce, _0x2d0418) {
            return _0x1d25ce ^ _0x2d0418;
        },
        '\x47\x63\x79': function _0x3346a1(_0x5cef79, _0x59b5a3) {
            return _0x5cef79 % _0x59b5a3;
        },
        '\x75\x63\x73': function _0x2f75f3(_0x3e1dda, _0x192d4c) {
            return _0x3e1dda < _0x192d4c;
        },
        '\x64\x68\x68': function _0x2cc0da(_0x240c12, _0x5b7c4c) {
            return _0x240c12 * _0x5b7c4c;
        },
        '\x70\x51\x75': function _0xe29029(_0x45e457, _0x88979d) {
            return _0x45e457 / _0x88979d;
        },
        '\x65\x4d\x7a': function _0xe40d05(_0x5a668a, _0x2c7bd1) {
            return _0x5a668a << _0x2c7bd1;
        },
        '\x5a\x42\x44': function _0x46f50e(_0x5ba232, _0x312024) {
            return _0x5ba232 & _0x312024;
        },
        '\x4c\x6e\x6b': function _0x56789d(_0x3aa5f8, _0x3172ef) {
            return _0x3aa5f8 != _0x3172ef;
        },
        '\x44\x59\x6c': function _0x19031e(_0x144a2e, _0x309a9f) {
            return _0x144a2e >> _0x309a9f;
        },
        '\x57\x4f\x61': function _0x1689bf(_0x39dbf0, _0x42e9f7) {
            return _0x39dbf0 in _0x42e9f7;
        },
        '\x67\x7a\x77': function _0x5cedc0(_0x21a7ef, _0x482441) {
            return _0x21a7ef < _0x482441;
        },
        '\x63\x42\x56': function _0x47a063(_0x47d3f1, _0x4bebf9) {
            return _0x47d3f1 << _0x4bebf9;
        },
        '\x5a\x66\x74': function _0x533710(_0x3fbb19, _0x2691b7) {
            return _0x3fbb19 & _0x2691b7;
        },
        '\x74\x63\x56': function _0x32ae2b(_0x524ea6, _0x3d4c00) {
            return _0x524ea6 >= _0x3d4c00;
        },
        '\x45\x41\x6b': function _0xc9d930(_0xcaad79, _0x4bf3dc, _0x1666a8) {
            return _0xcaad79(_0x4bf3dc, _0x1666a8);
        },
        '\x51\x48\x62': function _0x5b77e5(_0x177c9e, _0x33caaa) {
            return _0x177c9e >= _0x33caaa;
        }
    };
    function pt() {
        try {
            null[0]();
        } catch (e) {
            if (typeof e.stack != 'undefined') {
                if (e.stack.toString().indexOf('phantomjs') != -1) {
                    return !![]
                }
            }
            return ![];
        }
    }
    ;var _0x23d67d = _0x5949('0x0')[_0x5949('0x1')]('\x7c')
      , _0x436e75 = 0x0;
    while (!![]) {
        switch (_0x23d67d[_0x436e75++]) {
        case '\x30':
            var _0x1bf6e5 = '';
            continue;
        case '\x31':
            for (i = 0x0; _0x45ae41[_0x5949('0x2')](i, _0x439a49[_0x5949('0x3')]); i += 0x8) {
                _0x41e0ff = _0x45ae41[_0x5949('0x4')](i, 0x8);
                var _0x40b427 = _0x439a49[_0x5949('0x5')](i, _0x45ae41[_0x5949('0x6')](i, 0x8));
                var _0x577716 = _0x45ae41[_0x5949('0x7')](parseInt, _0x40b427, 0x10);
                with (_0x31f4aa) {
                    // if (!_0x45ae41[_0x5949('0x8')](_0x5949('0x9'), document) || !('toString'in Math.cos && Math.cos.toString().indexOf('[native code') != -1 && document.createTextNode.toString().indexOf('[native code') != -1)) {
                    //     _0x577716 = 0x0;
                    // }
                    ke[_0x5949('0xa')](_0x577716);
                }
            }
            continue;
        case '\x32':
            var _0x439a49 = _0x5d72cd[_0x5949('0x5')](0x0, _0x41e0ff);
            continue;
        case '\x33':
            var _0xccbe62 = _0x5d72cd[_0x5949('0x3')];
            continue;
        case '\x34':
            _0x3d7b02 = _0x31f4aa['\x6b\x65'];
            // with (Math) {
            //     if (('toString'in sin && sin.toString().indexOf('[native code') != -1 && document.getElementById.toString().indexOf('[native code') == -1) || window.callPhantom || /Phantom/.test(navigator.userAgent) || window.__phantomas || pt() || window.domAutomation || window.webdriver || document.documentElement.getAttribute('webdriver')) {
            //         _0x3d7b02 = [];
            //     }
            // }
            ;continue;
        case '\x35':
            _0x5d72cd = _0x5d72cd[_0x5949('0x5')](_0x41e0ff);
            continue;
        case '\x36':
            var _0x439a49 = 0x0;
            continue;
        case '\x37':
            return _0x1bf6e5;
        case '\x38':
            _0x41e0ff = _0x45ae41[_0x5949('0x4')](0x9, 0x8);
            continue;
        case '\x39':
            var _0x3d7b02 = [];
            continue;
        case '\x31\x30':
            while (_0x45ae41[_0x5949('0x2')](_0x439a49, _0x5d72cd[_0x5949('0x3')])) {
                var _0x138ee5 = '\x35\x7c\x38\x7c\x30\x7c\x31\x32\x7c\x31\x33\x7c\x39\x7c\x31\x30\x7c\x34\x7c\x31\x31\x7c\x36\x7c\x33\x7c\x31\x7c\x37\x7c\x32'[_0x5949('0x1')]('\x7c')
                  , _0x2d6ce4 = 0x0;
                while (!![]) {
                    switch (_0x138ee5[_0x2d6ce4++]) {
                    case '\x30':
                        var _0x896767 = 0x0;
                        continue;
                    case '\x31':
                        var _0x2de433 = _0x45ae41[_0x5949('0x6')](_0x45ae41[_0x5949('0xd')](_0x5eb93a, 0x2), _0x37c346);
                        continue;
                    case '\x32':
                        _0x145894 += 0x1;
                        continue;
                    case '\x33':
                        _0x30725e = _0x45ae41[_0x5949('0xe')](_0x45ae41[_0x5949('0xf')](_0x30725e, (parseInt('425775034217', 8) - 360 + 0x4 - 3) / (31 - 0x8)), _1x4bfb36);
                        continue;
                    case '\x34':
                        var _0x59ce16 = 0x28a28dec;
                        continue;
                    case '\x35':
                        var _0x5eb93a = 0x40;
                        continue;
                    case '\x36':
                        var _0x30725e = _0x45ae41[_0x5949('0x10')](_0x896767, _0x3d7b02[_0x45ae41[_0x5949('0x11')](_0x145894, 0x9)]);
                        continue;
                    case '\x37':
                        for (i = 0x0; _0x45ae41[_0x5949('0x12')](i, 0x4); i++) {
                            var _0x444853 = _0x5949('0x13')[_0x5949('0x1')]('\x7c')
                              , _0x3d6c21 = 0x0;
                            while (!![]) {
                                switch (_0x444853[_0x3d6c21++]) {
                                case '\x30':
                                    var _0x1a0e90 = _0x45ae41[_0x5949('0x14')](_0x45ae41[_0x5949('0x15')](_0x41e0ff, 0x9), i);
                                    continue;
                                case '\x31':
                                    _0x2de433 = _0x45ae41[_0x5949('0x16')](_0x2de433, _0x45ae41[_0x5949('0x15')](_0x41e0ff, 0x9));
                                    continue;
                                case '\x32':
                                    var _0x1a9381 = _0x45ae41[_0x5949('0x17')](_0x30725e, _0x2de433);
                                    continue;
                                case '\x33':
                                    if (_0x45ae41[_0x5949('0x18')](_0x3fa834, '$'))
                                        _0x1bf6e5 += _0x3fa834;
                                    continue;
                                case '\x34':
                                    var _0x3fa834 = String[_0x5949('0x19')](_0x1a9381 - 1);
                                    continue;
                                case '\x35':
                                    _0x1a9381 = _0x45ae41[_0x5949('0x1a')](_0x1a9381, _0x1a0e90);
                                    continue;
                                }
                                break;
                            }
                        }
                        continue;
                    case '\x38':
                        var _0x37c346 = 0x7f;
                        continue;
                    case '\x39':
                        var _0x31f4aa = {
                            '\x6d\x6d': 0x80,
                            '\x78\x78': 0x3f
                        };
                        continue;
                    case '\x31\x30':
                        do {
                            var _0x1fb52e = _0x5949('0x1b')[_0x5949('0x1')]('\x7c')
                              , _0x204cab = 0x0;
                            while (!![]) {
                                switch (_0x1fb52e[_0x204cab++]) {
                                case '\x30':
                                    _0x439a49++;
                                    continue;
                                case '\x31':
                                    _0x1a873b += 0x6;
                                    continue;
                                case '\x32':
                                    with (_0x31f4aa) {
                                        // if (!_0x45ae41[_0x5949('0x1c')](_0x5949('0x9'), document) || !(window.$ == window.jQuery)) {
                                        //     _0x3d9c8e += 10;
                                        //     xx = 0x11;
                                        // }
                                        if (_0x45ae41[_0x5949('0x1d')](_0x1a873b, _0x45ae41[_0x5949('0x14')](0x6, 0x5))) {
                                            var _0x332549 = _0x45ae41[_0x5949('0x17')](_0x3d9c8e, xx);
                                            _0x896767 += _0x45ae41[_0x5949('0x1e')](_0x332549, _0x1a873b);
                                        } else {
                                            var _0x332549 = _0x45ae41[_0x5949('0x1f')](_0x3d9c8e, xx);
                                            _0x896767 += _0x45ae41[_0x5949('0x14')](_0x332549, Math[_0x5949('0x20')](0x2, _0x1a873b));
                                        }
                                    }
                                    continue;
                                case '\x33':
                                    var _0x1fa71e = _0x5d72cd[_0x5949('0x5')](_0x439a49, _0x45ae41[_0x5949('0x6')](_0x439a49, 0x2));
                                    continue;
                                case '\x34':
                                    if (_0x45ae41[_0x5949('0x21')](_0x45ae41[_0x5949('0x6')](_0x439a49, 0x1), _0x5d72cd[_0x5949('0x3')])) {
                                        _0x5eb93a = 0x8f;
                                    }
                                    continue;
                                case '\x35':
                                    _0x439a49++;
                                    continue;
                                case '\x36':
                                    _0x3d9c8e = _0x45ae41[_0x5949('0x22')](parseInt, _0x1fa71e, 0x10);
                                    continue;
                                }
                                break;
                            }
                        } while (_0x45ae41[_0x5949('0x23')](_0x3d9c8e, _0x5eb93a));continue;
                    case '\x31\x31':
                        var _1x4bfb36 = parseInt('15345072730', 8) - 19;
                        continue;
                    case '\x31\x32':
                        var _0x1a873b = 0x0;
                        continue;
                    case '\x31\x33':
                        var _0x3d9c8e = 0x0;
                        continue;
                    }
                    break;
                }
            }
            continue;
        case '\x31\x31':
            var _0x531f91 = xxxcode;
            continue;
        case '\x31\x32':
            var _0x5d72cd = _0x531f91[_0x5949('0x24')](0x0);
            continue;
        case '\x31\x33':
            _0x5d72cd = _0x531f91;
            continue;
        case '\x31\x34':
            var _0x41e0ff = _0x45ae41[_0x5949('0x14')](0x9, 0x8);
            continue;
        case '\x31\x35':
            var _0x145894 = 0x0;
            continue;
        case '\x31\x36':
            var _0x31f4aa = {
                '\x6b': _0x439a49,
                '\x6b\x65': []
            };
            continue;
        }
        break;
    }
}


function aadecode (text) {
  var evalPreamble = "(\uFF9F\u0414\uFF9F) ['_'] ( (\uFF9F\u0414\uFF9F) ['_'] (";
  var decodePreamble = "( (\uFF9F\u0414\uFF9F) ['_'] (";
  var evalPostamble = ") (\uFF9F\u0398\uFF9F)) ('_');";
  var decodePostamble = ") ());";

  // strip beginning/ending space.
  text = text.replace(/^\s*/, "").replace(/\s*$/, "");

  // returns empty text for empty input.
  if (/^\s*$/.test(text)) {
      return "";
  }
  // check if it is encoded.
  if (text.lastIndexOf(evalPreamble) < 0) {
      throw new Error("Given code is not encoded as aaencode.");
  }
  if (text.lastIndexOf(evalPostamble) != text.length - evalPostamble.length) {
      throw new Error("Given code is not encoded as aaencode.");
  }

  var decodingScript = text.replace(evalPreamble, decodePreamble)
                           .replace(evalPostamble, decodePostamble);
  return eval(decodingScript);
}

function getMatches(string, regex, index) {
  index || (index = 1); // default to the first capturing group
  var matches = [];
  var match;
  while (match = regex.exec(string)) {
      matches.push(match[index]);
  }
  return matches;
}

OpenloadDecoder.decode("asdasd")
